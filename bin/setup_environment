#!/bin/bash

set -eu

DAQ_USER="daq"
DATA_DIRECTORY="/Data"
LOG_PATH="/home/daq/public_html/log/log"
VENV_NAME=".venv"

main() {
  need_cmd git
  need_cmd uv
  need_cmd babicmd
  need_cmd gum

  # Resolve the directory containing this script
  script_dir=$(dirname "$(realpath "$0")")
  exp_name=$(basename "$script_dir")

  # Locate the Git repository root
  if git -C "$script_dir" rev-parse --show-toplevel >/dev/null 2>&1; then
    repo_root=$(git -C "$script_dir" rev-parse --show-toplevel)
  else
    err "This script must be run from within a Git-managed project."
  fi

  # Present setup options to the user
  choice=$(gum choose \
    "Set default values" \
    "Interactive setup" \
    "Exit")

  case "$choice" in
  "Set default values")
    if gum confirm "Setup performed based on config.yaml, is it Okay?"; then
      say "Using default setup mode."
    else
      say "Setup process canceled."
      exit 0
    fi
    setup_mode="default"
    ;;
  "Interactive setup")
    if gum confirm "Setup performed based on config.yaml, is it Okay?"; then
      say "Entering interactive setup mode."
    else
      say "Setup process canceled."
      exit 0
    fi
    setup_mode="interactive"
    ;;
  "Exit")
    say "Setup process canceled."
    exit 0
    ;;
  *)
    err "Invalid choice: $choice"
    ;;
  esac

  # Configure Python environment
  setup_uv_env

  # send_runsummary setting
  setup_runsummary

  # babirl setting
  setup_babirl

  # synbolic link of the log
  ln -fs "$repo_root/log" "$LOG_PATH"

  say "Completed!"
}

setup_uv_env() {
  say "Setting up Python environment..."
  if [[ "$setup_mode" == "default" ]] ||
    { [[ "$setup_mode" == "interactive" ]] && gum confirm "Do you want to install Python packages?"; }; then
    if [[ -d "$repo_root/$VENV_NAME" ]]; then
      say "The virtual environment directory '$VENV_NAME' already exists."
      say "Synchronizing Python packages..."
      pushd "$repo_root" >/dev/null || err "Failed to change directory to $repo_root"
      uv sync || err "Failed to synchronize Python packages."
      popd >/dev/null || err "Failed to return to the previous directory."
      return
    fi

    say "Creating a new Python virtual environment..."
    pushd "$repo_root" >/dev/null || err "Failed to change directory to $repo_root"
    uv new "$VENV_NAME" || err "Failed to create a virtual environment."
    uv sync || err "Failed to install Python packages."
    popd >/dev/null || err "Failed to return to the previous directory."
  else
    say "Setup process canceled. (need python to proceed)"
    exit 0
  fi
}

setup_runsummary() {
  say "Setting up send_runsummary configuration..."
  local keyfile
  if [ -n "$RUNSUMMARY_KEY_PATH" ] && [ -e "$RUNSUMMARY_KEY_PATH" ]; then
    keyfile="$RUNSUMMARY_KEY_PATH"
  fi

  if [[ "$setup_mode" == "default" ]]; then
    if [ -n "$keyfile" ]; then
      pushd "$repo_root" >/dev/null || err "Failed to change directory to $repo_root"
      say "Copying JSON key file to send_runsummary/json directory..."
      cp "$keyfile" "./send_runsummary/json" || err "Failed to copy JSON key file"
      say "skip the connection test..."
      popd >/dev/null || err "Failed to return to the previous directory."
    else
      say "'RUNSUMMARY_KEY_PATH' is not set or invalid. Skipping the send_runsummary setting."
    fi
  elif [[ "$setup_mode" == "interactive" ]]; then
    pushd "$repo_root" >/dev/null || err "Failed to change directory to $repo_root"
    local json_path
    if gum confirm "Use the default path for JSON key? ($keyfile)?"; then
      json_path="$keyfile"
    else
      json_path=$(gum input --placeholder "Enter the path to the Google Sheets API JSON key file")
    fi

    if [[ -f "$json_path" ]]; then
      say "Copying JSON key file to send_runsummary/json directory..."
      cp "$json_path" "./send_runsummary/json" || err "Failed to copy JSON key file"

      if gum confirm "Do you want to run the connection test? (need to prepare Google Sheets in advance)"; then
        say "Running connection test..."
        say "(under development)"
        #python -m pytest -v || err "Connection test failed"
      fi
    else
      err "The specified JSON key file does not exist: $json_path"
    fi
    popd >/dev/null || err "Failed to return to the previous directory."
  fi
}

setup_babirl() {
  say "Setting up babirl configuration..."

  local runname
  if [[ "$setup_mode" == "default" ]]; then
    runname="run"
  elif [[ "$setup_mode" == "interactive" ]]; then
    runname=$(gum input --prompt "Enter the new runname" --value "run" --placeholder "usually 'run' or 'data'")
  fi
  babicmd localhost setrunname "$runname" >/dev/null 2>&1

  local runnumber
  if [[ "$setup_mode" == "default" ]]; then
    runnumber="0"
  elif [[ "$setup_mode" == "interactive" ]]; then
    runname=$(gum input --prompt "Enter the new runnumber" --value "0" --placeholder "usually '0' or '999'")
  fi
  babicmd localhost setrunnumber "$runnumber" >/dev/null 2>&1

  local start_script
  if [[ "$setup_mode" == "default" ]]; then
    start_script="$repo_root/start.sh"
  elif [[ "$setup_mode" == "interactive" ]]; then
    start_script=$(gum input --prompt "Enter the path for a start script" --value "$repo_root/start.sh" --placeholder "path to the start script")
  fi
  babicmd localhost setssminfo start "$start_script" >/dev/null 2>&1

  local stop_script
  if [[ "$setup_mode" == "default" ]]; then
    stop_script="$repo_root/stop.sh"
  elif [[ "$setup_mode" == "interactive" ]]; then
    stop_script=$(gum input --prompt "Enter the path for a stop script" --value "$repo_root/stop.sh" --placeholder "path to the stop script")
  fi
  babicmd localhost setssminfo stop "$stop_script" >/dev/null 2>&1
  babicmd localhost setssminfo on >/dev/null 2>&1

  local ex_hdd_dir
  if [[ "$setup_mode" == "default" ]]; then
    ex_hdd_dir="$DATA_DIRECTORY/$exp_name"
  elif [[ "$setup_mode" == "interactive" ]]; then
    ex_hdd_dir=$(gum input --prompt "Enter the path for storing raw data in external HDD" --value "$DATA_DIRECTORY/$exp_name" --placeholder "path to the directory storing raw data")
  fi
  if [ ! -d "$ex_hdd_dir" ]; then
    say "making data directory to external HDD..."
    sudo mkdir -p "$ex_hdd_dir"
  fi
  babicmd localhost sethdlist 0 path "$ex_hdd_dir" >/dev/null 2>&1
  babicmd localhost sethdlist 0 on >/dev/null 2>&1

  babicmd localhost sethdlist 1 path "$repo_root/ridf" >/dev/null 2>&1
  babicmd localhost sethdlist 1 on >/dev/null 2>&1

  if [[ "$setup_mode" == "default" ]] ||
    { [[ "$setup_mode" == "interactive" ]] && gum confirm "Based on config.yaml, setup will be performed, is it Okay?"; }; then
    uv run pybabilib/init_setting.py >dev/null 2>&1
  fi

  say "please check if the babirl is set correctly"
  babicmd localhost getconfig
}

say() {
  printf "\33[1mdaq setup\33[0m: %s\n" "$1"
}

err() {
  say "ERROR: $1" >&2
  exit 1
}

need_cmd() {
  if ! check_cmd "$1"; then
    err "need '$1' (command not found)"
  fi
}

check_cmd() {
  command -v "$1" >/dev/null 2>&1
}

if [[ $(whoami) != "$DAQ_USER" ]]; then
  echo "Run as '$DAQ_USER' user"
  exit 1
fi

main "$@"
