#!/bin/bash

set -eu

# Constants
readonly DAQ_USER="daq"
readonly DATA_DIRECTORY="/Data"
readonly LOG_PATH="/home/daq/public_html/log/log"
readonly VENV_NAME=".venv"

# Helper functions
say() {
  printf "\33[1mdaq setup\33[0m: %s\n" "$1"
}

print_babicmd() {
  printf "\33[1m[babirl command]\33[0m: %s\n" "$1"
}

err() {
  say "ERROR: $1" >&2
  exit 1
}

need_cmd() {
  if ! command -v "$1" >/dev/null 2>&1; then
    err "need '$1' (command not found)"
  fi
}

# Setup functions
validate_user() {
  [[ $(whoami) == "$DAQ_USER" ]] || err "Run as '$DAQ_USER' user."
}

validate_git_repo() {
  local dir="$1"
  git -C "$dir" rev-parse --show-toplevel >/dev/null 2>&1 || err "Not a Git repository."
}

get_setup_mode() {
  local choice
  choice=$(gum choose \
    "Set default values" \
    "Interactive setup" \
    "Exit")

  case "$choice" in
  "Set default values") echo "default" ;;
  "Interactive setup") echo "interactive" ;;
  "Exit") return ;;
  *) err "Invalid choice: $choice" ;;
  esac
}

setup_python_env() {
  local _="$1" repo_root="$2"
  say "Setting up Python environment..."
  pushd "$repo_root" >/dev/null || err "Failed to change directory to $repo_root"

  if [[ -d "$VENV_NAME" ]]; then
    say "Virtual environment exists. Synchronizing packages..."
    uv sync || err "Failed to synchronize Python packages."
  else
    say "Creating virtual environment..."
    uv venv "$VENV_NAME" || err "Failed to create virtual environment."
    uv sync || err "Failed to install Python packages."
  fi

  popd >/dev/null || err "Failed to return to the previous directory."
}

setup_runsummary() {
  local mode="$1" repo_root="$2"
  local keyfile="${RUNSUMMARY_KEY_PATH:-}"

  say "Setting up send_runsummary configuration..."
  local has_valid_keyfile=true
  [[ -n "$keyfile" && -f "$keyfile" ]] || has_valid_keyfile=false

  pushd "$repo_root" >/dev/null || err "Failed to change directory to $repo_root"

  if [[ "$mode" == "default" ]]; then
    if $has_valid_keyfile; then
      copy_json_key "$keyfile"
      say "skip the connection test..."
    else
      say "'RUNSUMMARY_KEY_PATH' is not set or invalid. Skipping the send_runsummary setting."
    fi
  else
    setup_runsummary_interactive "$keyfile" "$has_valid_keyfile"
  fi

  popd >/dev/null || err "Failed to return to the previous directory."
}

copy_json_key() {
  local keyfile="$1"
  say "Copying JSON key file to send_runsummary/json directory..."
  cp "$keyfile" "./send_runsummary/json" || err "Failed to copy JSON key file"
}

setup_runsummary_interactive() {
  local default_keyfile="$1"
  local has_valid_keyfile="$2"
  local json_path

  if $has_valid_keyfile && gum confirm "Use the default path for JSON key? ($default_keyfile)?"; then
    json_path="$default_keyfile"
  else
    json_path=$(gum input --placeholder "Enter the path to the Google Sheets API JSON key file")
  fi

  if [[ -f "$json_path" ]]; then
    copy_json_key "$json_path"
    if gum confirm "Do you want to run the connection test? (need to prepare Google Sheets in advance)"; then
      say "Running connection test..."
      uv run pytest send_runsummary/test_sender.py || say "failed. need to setup the Google Sheets"
    else
      say "Skipping connection test..."
    fi
  else
    say "The specified JSON key file does not exist: $json_path"
    say "Skipping the send_runsummary setting."
  fi
}

setup_babirl() {
  local mode="$1" repo_root="$2" exp_name="$3"

  say "Setting up babirl configuration..."
  local runname runnumber start_script stop_script ex_hdd_dir
  runname=$(prompt_value "$mode" "Enter the new runname: " "run")
  runnumber=$(prompt_value "$mode" "Enter the new runnumber: " "0")
  start_script=$(prompt_value "$mode" "Enter the path for a start script: " "$repo_root/start.sh")
  stop_script=$(prompt_value "$mode" "Enter the path for a stop script: " "$repo_root/stop.sh")
  ex_hdd_dir=$(prompt_value "$mode" "Enter the path for storing raw data: " "$DATA_DIRECTORY/$exp_name")
  if [ ! -d "$ex_hdd_dir" ]; then
    say "making data directory to external HDD..."
    sudo mkdir -p "$ex_hdd_dir"
  fi

  babicmd localhost setrunname "$runname" >/dev/null 2>&1
  print_babicmd "setrunname $runname"
  babicmd localhost setrunnumber "$runnumber" >/dev/null 2>&1
  print_babicmd "setrunnumber $runnumber"
  babicmd localhost setssminfo start "$start_script" >/dev/null 2>&1
  print_babicmd "setssminfo start $start_script"
  babicmd localhost setssminfo stop "$stop_script" >/dev/null 2>&1
  print_babicmd "setssminfo stop $stop_script"
  babicmd localhost setssminfo on >/dev/null 2>&1
  print_babicmd "setssminfo on"
  babicmd localhost sethdlist 0 path "$ex_hdd_dir" >/dev/null 2>&1
  print_babicmd "sethdlist 0 path $ex_hdd_dir"
  babicmd localhost sethdlist 0 on >/dev/null 2>&1
  print_babicmd "sethdlist 0 on"
  babicmd localhost sethdlist 1 path "$repo_root/ridf" >/dev/null 2>&1
  print_babicmd "sethdlist 1 path $repo_root/ridf"
  babicmd localhost sethdlist 1 on >/dev/null 2>&1
  print_babicmd "sethdlist 1 on"

  pushd "$repo_root" >/dev/null || err "Failed to change directory to $repo_root"
  uv run pybabilib/init_setting.py || err "Failed to initialize babirl."
  popd >/dev/null || err "Failed to return to the previous directory."

  say "please check if the babirl is set correctly"
  babicmd localhost getconfig
}

prompt_value() {
  local mode="$1" prompt="$2" default="$3"
  if [[ "$mode" == "default" ]]; then
    echo "$default"
  else
    gum input --prompt "Enter $prompt: " --value "$default" --placeholder "$default"
  fi
}

main() {
  # Validate required commands
  need_cmd git
  need_cmd uv
  need_cmd babicmd
  need_cmd gum

  # Validate user
  validate_user

  # Setup paths and variables
  say "Setup performs based on config.yaml. Need to modify in advance."
  local script_dir
  script_dir=$(dirname "$(realpath "$0")")

  local repo_root
  validate_git_repo "$script_dir"
  repo_root=$(git -C "$script_dir" rev-parse --show-toplevel)

  local exp_name
  exp_name=$(echo "$script_dir" | awk -F'/' '{print $(NF-1)}')

  # Get setup mode from user
  local setup_mode
  setup_mode=$(get_setup_mode)
  if [[ -z "$setup_mode" ]]; then
    say "Setup process canceled."
    exit 0
  fi

  # Run setup procedures
  setup_python_env "$setup_mode" "$repo_root"
  setup_runsummary "$setup_mode" "$repo_root"
  setup_babirl "$setup_mode" "$repo_root" "$exp_name"

  # Create symbolic link for log
  ln -fs "$repo_root/log" "$LOG_PATH"

  say "Completed!"
}

main "$@"
