#!/bin/bash

set -u

DAQ_USER="daq"
DATA_DIRECTORY="/Data"
LOG_PATH="/home/daq/public_html/log/log"

main() {
    need_cmd poetry
    need_cmd babicmd
    need_cmd expect

    current=$(
        cd "$(dirname "$0")" || exit 1
        pwd
    )
    say "start initial setting..."

    # send runsummary setting
    say "start send_runsummary setting..."
    setup_runsummary || exit 1
    usage_runsummary

    # babilib setting
    say "start babilib setting..."
    setup_babilib || exit 1
    usage_babilib

    # babirl setting
    say "start babirl setting..."
    setup_babirl || exit 1

    # synbolic link of the log
    say "start log setting..."
    ln -fs "${HOME}/exp/${EXP_NAME}/log" "$LOG_PATH"

    say "finished!"
    cd "$current" || exit 1
}

setup_runsummary() {
    cd "${HOME}/exp/${EXP_NAME}/send_runsummary" || exit 1
    poetry install
    poetry update
}

usage_runsummary() {
    echo "==========================================================="
    echo " please copy json key file to send the google spread sheet"
    echo "==========================================================="
    echo "prepare the google spread sheet for the run summary -> modify the conf.yaml"
    echo "then please check the connection by"
    echo "> cd send_runsummary"
    echo "> poetry run pytest -v"
    echo ""
}

setup_babilib() {
    cd "${HOME}/exp/${EXP_NAME}/pybabilib" || exit 1
    poetry install
    poetry update
}

usage_babilib() {
    echo "modify the config.yaml for each experiment setup"
    echo "then please check the connection by"
    echo "> cd pybabilib"
    echo "> poetry run pytest -v"
    echo ""
}

setup_babirl() {
    readline "Enter the new runname (usually run): "
    runname=$RETVAL
    babicmd localhost setrunname "$runname" >/dev/null 2>&1

    readline "Enter the new runnumber (usually 0): "
    runnumber=$RETVAL
    babicmd localhost setrunnumber "$runnumber" >/dev/null 2>&1

    say "setting the babissm config..."
    expect -c "
    set timeout 5
    spawn babicmd localhost setssminfo start
    expect \"PATH :\"
    send \"${HOME}/exp/${EXP_NAME}/start.sh\n\"
    interact
    " >/dev/null 2>&1

    expect -c "
    set timeout 5
    spawn babicmd localhost setssminfo stop
    expect \"PATH :\"
    send \"${HOME}/exp/${EXP_NAME}/stop.sh\n\"
    interact
    " >/dev/null 2>&1

    babicmd localhost setssminfo on >/dev/null 2>&1

    say "setting the HD (hard disk) config..."
    if [ ! -d "${DATA_DIRECTORY}/${EXP_NAME}" ]; then
        sudo mkdir -p "${DATA_DIRECTORY}/${EXP_NAME}"
    fi
    babicmd localhost sethdlist 0 path "${DATA_DIRECTORY}/${EXP_NAME}" >/dev/null 2>&1
    babicmd localhost sethdlist 0 on >/dev/null 2>&1

    babicmd localhost sethdlist 1 path "${HOME}/exp/${EXP_NAME}/ridf" >/dev/null 2>&1
    babicmd localhost sethdlist 1 on >/dev/null 2>&1

    cd "${HOME}/exp/${EXP_NAME}/pybabilib" || exit 1
    poetry run python src/init_setting.py

    say "please check if the babirl is set correctly"
    babicmd localhost getconfig
}

# general function
readline() {
    while true; do
        read -rp "$1" read_value
        read -rp "Is it OK? (y/n): " _answer
        case ${_answer} in
        y)
            break
            ;;
        esac
    done
    RETVAL="$read_value"
}

say() {
    printf "\33[1mdaq setup\33[0m: %s\n" "$1"
}

err() {
    say "$1" >&2
    exit 1
}

need_cmd() {
    if ! check_cmd "$1"; then
        err "need '$1' (command not found)"
    fi
}

check_cmd() {
    command -v "$1" >/dev/null 2>&1
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing
# command.
ensure() {
    if ! "$@"; then err "command failed: $*"; fi
}

if [[ $(whoami) != "$DAQ_USER" ]]; then
    echo "Run as '$DAQ_USER' user"
    exit 1
fi

main "$@" || exit 1
